-----------------Client.c-----------------------


#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 

void error(char *msg)
{
    perror(msg);
    exit(0);
}

int main(int argc, char *argv[])
{
	int sockfd, portno, n;

    	struct sockaddr_in serv_addr;
    	struct hostent *server;

    	char buffer[256];
    	if (argc < 3) {
    	   	fprintf(stderr,"usage %s hostname port\n", argv[0]);
    		exit(0);
    	}
    	portno = atoi(argv[2]);
    	sockfd = socket(AF_INET, SOCK_STREAM, 0);
    	if (sockfd < 0) 
    	    error("ERROR opening socket");
    	server = gethostbyname(argv[1]);
    	if (server == NULL) {
    	    fprintf(stderr,"ERROR, no such host\n");
    	    exit(0);
    	}
    	bzero((char *) &serv_addr, sizeof(serv_addr));
    	serv_addr.sin_family = AF_INET;
    	bcopy((char *)server->h_addr,
		(char *)&serv_addr.sin_addr.s_addr,
		server->h_length);
    	serv_addr.sin_port = htons(portno);
	if (connect(sockfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr)) < 0) 
        	error("ERROR connecting");

	printf("Aby pobrac plik wpisz jego nazwe: plik1.txt , plik2.txt , plik3.txt \n");
	while(1){
    		printf("Uzytkownik:");
		bzero(buffer, 256);
    		fgets(buffer,255,stdin);

    		n = write(sockfd,buffer,strlen(buffer));
    		if (n < 0)
    		     error("ERROR writing to socket");
    		bzero(buffer,256);


    		n = read(sockfd,buffer,256);
    		if (n < 0)
    		     error("ERROR reading from socket");
    		printf("%s\n",buffer);
		bzero(buffer, 256);
    	}

	return 0;
}








-----------Server.c------------




#include <stdio.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <dirent.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

void error(char *msg)
{
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[])
{
     	int sockfd, newsockfd, portno, clilen;
     	char buffer[256];
	char ServerData[256];
     	struct sockaddr_in serv_addr, cli_addr;
     	int n;
     	if (argc < 2) {
     	    	fprintf(stderr,"ERROR, no port provided\n");
     	    	exit(1);
     	}
     	sockfd = socket(AF_INET, SOCK_STREAM, 0);
     	if (sockfd < 0){ 
     	   	error("ERROR opening socket");
	}
     	bzero((char *) &serv_addr, sizeof(serv_addr));
     	portno = atoi(argv[1]);
     	serv_addr.sin_family = AF_INET;
     	serv_addr.sin_addr.s_addr = INADDR_ANY;
     	serv_addr.sin_port = htons(portno);
     	if (bind(sockfd, (struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0)
             	 error("ERROR on binding");
     	listen(sockfd,5);
     	clilen = sizeof(cli_addr);
     	newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
     	if (newsockfd < 0)
	 	error("ERROR on accept");
	FILE * logs;
	logs = fopen("./ServerLogs.txt", "a");
	if(logs == NULL){
		printf("Nie udalo sie otworzyc ServerLogs.txt");
	}else{
		fprintf(logs,"%d:%d - Polaczyl sie do serwera \n", &cli_addr, newsockfd);
		fclose(logs);
	}

	while(1){
		bzero(buffer,256);
    		n = read(newsockfd,buffer,255);
    		if (n < 0) error("ERROR reading from socket");

		printf("IP:");

	    	printf("%d:%d Requested : %s\n", inet_ntoa(cli_addr.sin_addr), (int) ntohs(cli_addr.sin_port) ,buffer);

		if(strstr(buffer, "list")){
			n = write(newsockfd, "plik1.txt , plik2.txt , plik3.txt", 256);
		}else if(strstr(buffer, ".txt")){
			char buf2[256];
			snprintf(buf2, sizeof(buf2),"cp ./ServerData/%s ./ClientData", buffer);
			/*Nie do koÅ„ca rozumiem pobierania plikow z serwera wiec zrobilem uproszczony sposob na kopiowanie pliku z folderu ServerData do ClientData*/
			if(system(buf2) != 1){
				char wielkosc[256];
				snprintf(wielkosc, sizeof(wielkosc), "Wielkosc pliku: %d", -1);
				n = write(newsockfd, wielkosc, 256);

			}else{
				logs = fopen("./ServerLogs.txt", "a");
				if(logs == NULL){
					printf("Nie udalo sie otworzyc pliku");
				}else{
					fprintf(logs, "%d:%d - Pobral plik %s", inet_ntoa(cli_addr.sin_addr), (int) ntohs(cli_addr.sin_port), buffer);
					fclose(logs);
				}
				n = write(newsockfd, "Pobrano plik do ClientData", 255);
			}
		}else{
			n = write(newsockfd,"Nie znam komendy", 256);
		}
    		if (n < 0)
			error("ERROR writing to socket");
	}
	fclose(logs);
     	return 0;
}

