Zadanie 1
#include <iostream>
#include <unistd.h>
using namespace std;

int main(){
        int pid = getpid();
        int ppid = getppid();
        int a;
        cout << "PID: " << pid << " PPID" << ppid << endl;
        cin >> a;
return 0;
}

--------------------

Zadanie 2

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

using namespace std;

int main()
{
	int mainPID = getpid()
	int sp = fork();

	if (sp > 0) {
		cout << "PID = " <<  getpid() << " PPID = " << getppid() << endl;
	} else {
		cout << "Child PID = " << getpid() << endl;
		cout << "Child PPID = " << getppid() << endl;
	}

	if (mainPID == getpid()) 
	{	
		waitpid(0, 0, 0);
	}

	return 0;
}

--------------------

Zadanie 3

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char* argv[]) {
  int result;
  int i;
  int sp = fork();
  int x = atoi(argv[1]);

  if (sp > 0) 
  {
    wait(0);
    for (i = 0; i < x ; i++) 
     {
      result += i;
     }

    cout << "Wynik: " << result << endl;
  }
  else 
  {
    cout << "nieparzyste: " << endl;
    for (i = 0; i <= x; i++) 
    {
      if (i % 2 == 1) 
	{
         cout << i << endl;
    	}
    }
  }

  return 0;
}

--------------------
Zadanie 4

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

int make_child(int x, int y);

int main() {
  
	int x = 0;
	int y = 100;
	
	if (x <= y) 
	{
    	  cout << " Child PID: " << getpid() << "Parent PID: " << getppid()<< endln;

    	  pid_t pid = fork();

    	if (pid == 0) 
	{
      	  sleep(1);
      	  if (x + 1 <= y) 
	{
    	  cout << " Child PID: " << getpid() << "Parent PID: " << getppid()<< endln;

    	  pid_t pid = fork();
	}
    	}
  	}

  return wait(0);

}

--------------------
Zadanie 5

#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

using namespace std;

int main() {
	int i;
    	for (i = 0; i <= 100; i++) 
	{
        	if (fork() == 0) 
		{
           		cout << "Child " << i  << " Child PID: " << getpid() << " Parent PID: " << getppid() << endl;
            		return 0;
        	}
	
		wait(0);
    	}

    	for (i = 0; i <= 100; i++) {
        	waitpid(0, 0, 0);
    	}

    	return 0;
}

--------------------
Zadanie 6

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>


int main(){
	
	pid_t masterPid = getpid();
	FILE* chat = fopen("tmp/chat.txt", "w");
	pid_t p = fork();

	if(p > 0){
		fprintf(chat, "Pierwszy u≈ºytkownik\n");
	}else{
		fprintf(chat, "Drugi uzytkownik\n");
	}

	return 0;
}

--------------------
Zadanie domowe

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int makeChild(int i, int z, int childNum) {
  if (i < z) {
    cout <<"PID "<< getpid() << " PPID "<< getppid() << endl;

    for (int j = 0; j < childNum; j++) {
      pid_t pid = fork();

      if (pid == 0) 
      {
        return makeChild(i + 1, z, childNum);
      } 
	else if (pid == -1) 
	{
        return 1;
        }
      }

      }  
      else 
	{
    	cout<< "PID " << getpid() << "PPID " << getppid() << endl;
  	}
 
 wait(0);
  wait(0);
  return 0;
}

int main() {
  return makeChild(0, 2, 2);
}



