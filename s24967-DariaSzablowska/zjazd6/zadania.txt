Zadanie 1

int x = 1;

void sygnal(int);
int main(){

	signal(SIGUSR1, handler);
	while(x){
		cout<< "PID: "<< getpid() << endl;
		sleep(1);
	}

}
void sygnal (int sig){
	cout<< "Signal!" << endl;
	x = 0;
}

--------------------
Zadanie2

void sig();
void function();

char path[] = "/tmp/lock"
int pid;

int main() {
    FILE* file;
    signal (SIGUSR1, sig);
    signal (SIGINT, function);

    file = fopen(path, "r");

    if (file==true) {
        fscanf (file, "%d", &pid);
        fclose(file);

        raise(SIGUSR1);
    } 	
	else {
	file = fopen(path, "w");
        fprintf(file, "%d", getpid());
        fclose(file);

        while(1) 
	{
	 sleep(1); 		
	}
    }

    return 0;
}
void sig() {
    printf("Proba uruchomienia drugiej instancji!");
    exit(1);
}
void function() {
    remove(path);
}

--------------------
Zadanie CLIENT

void error(char *x)
{
    perror(x);
    exit(0);
}

int main(int argc, char *argv[])
{
	int sockfd, portno, n;

    	struct sockaddr_in serv_addr;
    	struct hostent *server;

    	char buffer[256];
    	if (argc < 3) {
    	   	fprintf(stderr,"usage %s hostname port\n", argv[0]);
    		exit(0);
    	}
    	portno = atoi(argv[2]);
    	sockfd = socket(AF_INET, SOCK_STREAM, 0);
    	if (sockfd < 0) 
    	    error("ERROR opening socket");
    	server = gethostbyname(argv[1]);
    	if (server == NULL) {
    	    fprintf(stderr,"ERROR, no such host\n");
    	    exit(0);
    	}
    	bzero((char *) &serv_addr, sizeof(serv_addr));
    	serv_addr.sin_family = AF_INET;
    	bcopy((char *)server->h_addr,
		(char *)&serv_addr.sin_addr.s_addr,
		server->h_length);
    	serv_addr.sin_port = htons(portno);
	if (connect(sockfd,(struct sockaddr *)&serv_addr,sizeof(serv_addr)) < 0) 
        	error("ERROR connecting");

	printf("Aby pobrac plik wpisz jego nazwe: plik1.txt , plik2.txt , plik3.txt \n");
	while(1){
    		printf("Uzytkownik:");
		bzero(buffer, 256);
    		fgets(buffer,255,stdin);

    		n = write(sockfd,buffer,strlen(buffer));
    		if (n < 0)
    		     error("ERROR writing to socket");
    		bzero(buffer,256);


    		n = read(sockfd,buffer,256);
    		if (n < 0)
    		     error("ERROR reading from socket");
    		printf("%s\n",buffer);
		bzero(buffer, 256);
    	}

	return 0;
}

SERVER
void error(char *msg)
{
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[])
{
     int sockfd, newsockfd, portno, clilen;
     char buffer[256];
     struct sockaddr_in serv_addr, cli_addr;
     int n;
     if (argc < 2) {
         fprintf(stderr,"ERROR, no port provided\n");
         exit(1);
     }
     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd < 0) 
        error("ERROR opening socket");
     bzero((char *) &serv_addr, sizeof(serv_addr));
     portno = atoi(argv[1]);
     serv_addr.sin_family = AF_INET;
     serv_addr.sin_addr.s_addr = INADDR_ANY;
     serv_addr.sin_port = htons(portno);
     if (bind(sockfd, (struct sockaddr *) &serv_addr,
              sizeof(serv_addr)) < 0) 
              error("ERROR on binding");
     listen(sockfd,5);
     clilen = sizeof(cli_addr);
     newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
     if (newsockfd < 0) 
          error("ERROR on accept");
     bzero(buffer,256);
     n = read(newsockfd,buffer,255);
     if (n < 0) error("ERROR reading from socket");
     printf("Here is the message: %s\n",buffer);
     n = write(newsockfd,"I got your message",18);
     if (n < 0) error("ERROR writing to socket");
     return 0; 
}



